Function arc(in number speedB, in number speedC, in number kp, in number kd, in number exitEncoder)
  errold = 0
  exit = 0
  encoderB = 0
  encoderC = 0
  Motor.ResetCount("BC")
  ratio = Math.Abs(speedB / speedC)
  While exit = 0
    encoderB = Motor.GetCount("B")
    encoderC = Motor.GetCount("C")
    currentEncoder = (Math.Abs(encoderB) + Math.Abs(encoderC)) / 2
    If (currentEncoder >= exitEncoder) Then
      exit = 1
    EndIf
    If speedB > 0 Then
      err = encoderB * encoderC * ratio * -1
    Else
      err = encoderB * encoderC * ratio
    EndIf
    u = kp * err + kd * (err - errold)
    mb = speedB - u
    mc = speedC - u
    Motor.StartPower("B", mb)
    Motor.StartPower("C", mc)
    LCD.Text(1, 0, 0, 2, mb)
    errold = err
  EndWhile
EndFunction

Function resetGyro()
  Sensor.SetMode(4, 0)
  Sensor.ReadRawValue(4, 0)
  gyroResetData[0] = 0
  Sensor.SendUARTData(4, 1, gyroResetData)
  Sensor.Wait(4)
EndFunction

Function stopBC(in number w)
  Motor.StartPower("B", 0)
  Motor.StartPower("C", 0)
  Program.Delay(w)
EndFunction

Function down()
  arc(-65, -65, 0.1, 0.5, 1800)
EndFunction

Function up()
  arc(65, 65, 0.1, 0.5, 1700)
EndFunction

Function dropCube()
  Motor.StartPower("A", 40)
  Program.Delay(600)
  Motor.StartPower("A", -40)
  Program.Delay(600)
EndFunction

Function dropCubeAndScan()
  LCD.Clear()
  Program.Delay(200)
  value = Sensor.ReadRawValue(4, 2)
  If value > 3 Then
    dropCube()
    dropCube()
  Else
    dropCube()
  EndIf
EndFunction

rotated = 0
Function rotateLeft(in number value)
  resetGyro()
  While Math.Abs(Sensor.ReadRawValue(4, 0)) < value + @rotated
    Motor.StartPower("D", 35)
  EndWhile
  @rotated += value
EndFunction

Function rotateRight(in number value)
  resetGyro()
  While Math.Abs(Sensor.ReadRawValue(4, 0)) < value + @rotated
    Motor.StartPower("D", -35)
  EndWhile
  @rotated -= value
EndFunction
